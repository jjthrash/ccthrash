--[[
USAGE:
1. Fill the turtle with one item each of those you don't want mined (e.g. stone, dirt, gravel).
   Coal is not coal ore, so putting coal as fuel won't cause problems.
2. Make sure there is enough fuel to cover 1000? moves ((char)coal is 80 moves, so 13 or so.
   This is just a guess at the moment. The turtle will auto-refuel as needed. If it runs out of
   fuel, it will attempt to return and ask for more.
3. When it's done mining, it will spit everything but one each of the junk items out the back.
   Place a chest there (or RP2 transposer, or another turtle) if you want it more organized.
4. Then it will move forward 3 and start over. When done it will move back to the chest and spit
   everything out again.

outline of algoritm:
- mine
    - dig down
    - examine each direction, if interesting, follow the deposit, return
    - if bedrock, done
    - if return to top, deposit everything into chest, come back, keep going
- back up until chest
- deposit everything into chest
- return
- go forward 2 or 3
- mine
- etc
--]]

local REQUIRED_FUEL_LEVEL = 1000

local stack = {}
function stack.new()
  return { last = 0 }
end

function stack.push(s, value)
  local last = s.last + 1
  s.last = last
  s[last] = value
end

function stack.pop(s)
  local last = s.last
  if stack.isEmpty(s) then error("list is empty") end
  local value = s[last]
  s[last] = nil         -- to allow garbage collection
  s.last = last - 1
  return value
end

function stack.isEmpty(s)
  return s.last < 1
end

--[[
XXX: A mover is something that can do normal motions, but
along with other function. E.g. undoable movement, fuel-sensitive
movement, tracking current position, etc.
--]]
local undoable = {}
function undoable.down(moveStack)
  turtle.down()
  stack.push(moveStack, 'd')
end

function undoable.up(moveStack)
  turtle.up()
  stack.push(moveStack, 'u')
end

function undoable.turnRight(moveStack)
  turtle.turnRight()
  stack.push(moveStack, 'r')
end

function undoable.turnLeft(moveStack)
  turtle.turnLeft()
  stack.push(moveStack, 'l')
end

function undoable.forward(moveStack)
  turtle.forward()
  stack.push(moveStack, 'f')
end

function undoable.back(moveStack)
  turtle.back()
  stack.push(moveStack, 'b')
end

function undoable.aboutFace(moveStack)
  undoable.turnLeft(moveStack)
  undoable.turnLeft(moveStack)
end

function undoable.undo(motion)
  if motion == 'd' then
    turtle.up()
  elseif motion == 'u' then
    turtle.down()
  elseif motion == 'r' then
    turtle.turnLeft()
  elseif motion == 'l' then
    turtle.turnRight()
  elseif motion == 'f' then
    turtle.back()
  elseif motion == 'b' then
    turtle.forward()
  end
end

function undoable.unwind(moveStack)
  while not stack.isEmpty(moveStack) do
    undoable.undo(stack.pop(moveStack))
  end
end

function isInteresting(slotsWithUninterestingItems)
  if not turtle.detect() then
    return false
  end

  for i = 1,table.getn(slotsWithUninterestingItems) do
    turtle.select(slotsWithUninterestingItems[i])
    if turtle.compare() then
      return false
    end
  end

  return true
end

-- Assume all slots with something in them contain uninteresting
-- items and collect the indices of those slots
function markUninterestingItems()
  local result = {}

  for i=1,16 do
    if turtle.getItemCount(i) > 0 then
      table.insert(result, i)
    end
  end

  return result
end

--[[
1. Do a mining run down.
2. Deliver items to a chest.
3. Return to start of last mining run.
--]]
function mine(slotsWithUninterestingItems)
  local mainMoveStack = stack.new()

  local endOfLine = false

  while true do
    if endOfLine then
      undoable.unwind(mainMoveStack)
      break
    else
      endOfLine = turtle.detectDown() and not turtle.digDown()
      undoable.down(mainMoveStack)

      mineInterestingItems(slotsWithUninterestingItems)
    end
  end

  -- should be where we started mining
  unload()
end

-- on a single level, check for interesting stuff around and get it.
-- in the end, the bot will face the same direction it started in
function mineInterestingItems(slotsWithUninterestingItems)
  for i=1,4 do
    turtle.turnRight()
    if isInteresting(slotsWithUninterestingItems) then
      branchForward(slotsWithUninterestingItems)
    end
  end
end

-- mine forward, recursively getting interesting items
-- then undo all motions, returning to starting location&orientation
function branchForward(slotsWithUninterestingItems)
  turtle.dig()
  turtle.forward()
  mineInterestingItems(slotsWithUninterestingItems)
  turtle.back()
end

function tableContains(table, element)
  for e in table do
    if e == element then
      return true
    end
  end

  return false
end

-- go backward until I find a chest or am blocked
-- if chest, deposit everything but my coal
-- otherwise, just spit stuff out to my right or left, whichever is empty
function unload(slotsWithUninterestingItems)
  local moveStack = stack.new()
  undoable.aboutFace(moveStack)
  while not turtle.detect() do
    undoable.forward(moveStack)
  end

  shell.exit()
  --TODO selective unloading

  undoable.unwind(moveStack)
end

function enoughFuelForMiningRun()
  return turtle.getFuelLevel() >= REQUIRED_FUEL_LEVEL
end

function go()
  uninterestingItems = markUninterestingItems()

  macroMoveStack = stack.new()

  while enoughFuelForMiningRun() do --TODO while nobody's telling us to stop? E.g. rednet signal
    mine(uninterestingItems)

    --undoable.forward(macroMoveStack)
    --undoable.forward(macroMoveStack)
    --undoable.forward(macroMoveStack)
  end

  undoable.unwind(macroMoveStack)
end

--local args = { ... }

go()


-- vim:ft=lua
